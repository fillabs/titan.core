/******************************************************************************
 * Copyright (c) ETSI 2020.
 *
 * This file is subject to copyrights owned by ETSI. Non-exclusive permission
 * is hereby granted, free of charge, to copy, reproduce and amend this file
 * under the following conditions: It is provided "as is", without warranty of any
 * kind, expressed or implied.
 * 
 * ETSI shall never be liable for any claim, damages, or other liability arising
 * from its use or inability of use.This permission does not apply to any documentation
 * associated with this file for which ETSI keeps all rights reserved. The present
 * copyright notice shall be included in all copies of whole or part of this
 * file and shall not imply any sub-license right.
 *
 * Modified by: Elemer Lelik
 *
/*****************************************************************
 ** @author  STF 572
 ** @version 0.0.1
 ** @purpose 5.1.1.7, Ensure that a method inherited from a superclass can be overridden by the subclass.
 ** @verdict pass accept
*****************************************************************/
module Sem_5010107_Methods_002 "TTCN-3:2018 Object-Oriented" {

    type component GeneralComp {
    }
    
    type class MySuperClass {
        var octetstring v_o;

        public function doSomething() return integer {
            return oct2int(this.v_o);
        }
    }

    type class MySubClass extends MySuperClass {

        public function doSomething() return integer {
            return 1;
        }
    }

    testcase TC_Sem_5010107_Methods_002() runs on GeneralComp {
        var MySubClass v_a := MySubClass.create('AAFF'O) //: MySuperClass();  FIXME!!!
        if (v_a.doSomething() == 1) { 
            setverdict(pass);
        } else {
            setverdict(fail);
        }
    }

    control {
        execute(TC_Sem_5010107_Methods_002());
    }
}

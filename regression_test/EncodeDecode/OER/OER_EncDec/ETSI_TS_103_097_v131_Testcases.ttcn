/******************************************************************************
 * Copyright (c) 2000-2021 Ericsson Telecom AB
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v2.0
 * which accompanies this distribution, and is available at
 * https://www.eclipse.org/org/documents/epl-2.0/EPL-2.0.html
 *
 * Contributors:
 *   Balasko, Jeno
 *   Beres, Szabolcs
 *   Delic, Adam
 *   Kovacs, Ferenc
 *   Szabados, Kristof
 *
 ******************************************************************************/
//The target of these test cases are the basic data types from specification
//'ISO/IEC 8825-7:2015 -- Information technology – ASN.1 encoding rules:
//Specification of Octet Encoding Rules'
//
//The target data types are used in the following technical specification:
// 'ETSI TS 103 097 V1.3.1 (2017-10)'
//Intelligent Transport Systems (ITS); Security;
//Security header and certificate formats and certificate formats 
//
// 'IEEE Std 1609.2-2016 IEEE Standard'
//Wireless Access in Vehicular Environments—Security Services for
//Applications and Management Messages
module ETSI_TS_103_097_v131_Testcases {

import from ETSITS103097v131 all;
type component Test_CT {}
//---------------------------------------------------------------------*
// Testing OER encoding of the basic types
//---------------------------------------------------------------------*
//---------------------------------------------------------------------*
// OER encoding
//---------------------------------------------------------------------*
external function enc_Ieee1609Dot2Data(in TestIeee1609Dot2Data pdu) return octetstring with { extension "prototype(convert) encode(OER)" }
external function dec_Ieee1609Dot2Data(in octetstring stream) return TestIeee1609Dot2Data with { extension "prototype(convert) decode(OER)" }

//*********************************************
// TESTCASES
//*********************************************

//D.5.1 “Basic safety message” with dummy payload, signed with a digest
testcase tc_Ieee1609Dot2Data_SignedWithDigest() runs on Test_CT {
  const octetstring encoded := 
'0381004003800F5468697320697320612042534D0D0A4001201112131415161718802122232425262728808231323334353637383132333435363738313233343536373831323334353637384142434445464748414243444546474841424344454647484142434445464748'O;
  const TestIeee1609Dot2Data data := {
    protocolVersion := 3,
    content := {
      signedData := {
        hashId := sha256,
        tbsData := {
          payload := {
            data := {
              protocolVersion := 3,
              content := { unsecuredData := '5468697320697320612042534D0D0A'O} 
            }
          },
          headerInfo := {
            psid := 32,
            generationTime := 1230066625199609624
          } 
        },
        signer := {digest := '2122232425262728'O},
        signature_ := {
          ecdsaNistP256Signature := {
            rSig := { compressed_y_0 := '3132333435363738313233343536373831323334353637383132333435363738'O },
            sSig := '4142434445464748414243444546474841424344454647484142434445464748'O
          }
        }
      }
    } 
  };

  const TestIeee1609Dot2Data decoded := {
    protocolVersion := 3,
    content := {
      signedData := {
        hashId := sha256,
        tbsData := {
          payload := {
            data := {
              protocolVersion := 3,
              content := { unsecuredData := '5468697320697320612042534D0D0A'O} 
            },
            extDataHash := omit
          },
          headerInfo := {
            psid := 32,
            generationTime := 1230066625199609624,
            expiryTime := omit,
            generationLocation := omit,
            p2pcdLearningRequest := omit,
            missingCrlIdentifier := omit,
            encryptionKey := omit,
            inlineP2pcdRequest := omit,
            requestedCertificate := omit
          } 
        },
        signer := {digest := '2122232425262728'O},
        signature_ := {
          ecdsaNistP256Signature := {
            rSig := { compressed_y_0 := '3132333435363738313233343536373831323334353637383132333435363738'O },
            sSig := '4142434445464748414243444546474841424344454647484142434445464748'O
          }
        }
      }
    } 
  };

  if (enc_Ieee1609Dot2Data(data) == encoded) {setverdict(pass);} else {setverdict(fail);}
  if (dec_Ieee1609Dot2Data(encoded) == decoded) {setverdict(pass);} else {setverdict(fail);}
}

// D.5.2 “Basic safety message” with dummy pay load, signed with a certificate
testcase tc_Ieee1609Dot2Data_SignedWithCertificate() runs on Test_CT {
  const octetstring encoded :=
    '0381004003800F5468697320697320612042534D0D0A4001201112131415161718810101000301802122232425262728508080006431323334353637383941424344515253545556575859616263004604E09A208400A983010380007C8001E4800348010200012000012681829192939495969798919293949596979891929394959697989192939495969798808231323334353637383132333435363738313233343536373831323334353637384142434445464748414243444546474841424344454647484142434445464748'O;

  const TestIeee1609Dot2Data data := {
    protocolVersion := 3,
    content := {
      signedData := {
        hashId := sha256,
        tbsData := {
          payload := {
            data := {
              protocolVersion := 3,
              content := { unsecuredData := '5468697320697320612042534D0D0A'O }
            }
          },
          headerInfo := { psid := 32, generationTime := 1230066625199609624 }
        },
        signer := {
          certificate := {
            {
              version := 3,
              type_ := implicit,
                issuer := { sha256AndDigest := '2122232425262728'O },
                toBeSigned := {
                  id := {
                    linkageData := {
                      iCert := 100,
                      linkage_value := '313233343536373839'O,
                      group_linkage_value := { jValue := '41424344'O, value_ := '515253545556575859'O }
                    }
                  },
                  cracaId := '616263'O,
                  crlSeries := 70,
                  validityPeriod := { start_ := 81828384, duration := { hours := 169 } },
                  region := { identifiedRegion := { { countryOnly := 124 }, { countryOnly := 484 }, { countryOnly := 840 } } },
                  appPermissions := { { psid := 32}, { psid := 38} },
                  verifyKeyIndicator := { reconstructionValue := { compressed_y_0 := '9192939495969798919293949596979891929394959697989192939495969798'O } }
                }
              }
            }
          },
          signature_ := {
            ecdsaNistP256Signature := {
              rSig := { compressed_y_0 := '3132333435363738313233343536373831323334353637383132333435363738'O},
              sSig := '4142434445464748414243444546474841424344454647484142434445464748'O
            }
          }
        }
      }
    };

  const TestIeee1609Dot2Data decoded := {
    protocolVersion := 3,
    content := {
      signedData := {
        hashId := sha256,
        tbsData := {
          payload := {
            data := {
              protocolVersion := 3,
              content := { unsecuredData := '5468697320697320612042534D0D0A'O }
            },
            extDataHash := omit
          },
          headerInfo := {
            psid := 32,
            generationTime := 1230066625199609624,
            expiryTime := omit,
            generationLocation := omit,
            p2pcdLearningRequest := omit,
            missingCrlIdentifier := omit,
            encryptionKey := omit,
            inlineP2pcdRequest := omit,
            requestedCertificate := omit
          }
        },
        signer := {
          certificate := {
            {
              version := 3,
              type_ := implicit,
                issuer := { sha256AndDigest := '2122232425262728'O },
                toBeSigned := {
                  id := {
                    linkageData := {
                      iCert := 100,
                      linkage_value := '313233343536373839'O,
                      group_linkage_value := {
                        jValue := '41424344'O,
                        value_ := '515253545556575859'O
                      }
                    }
                  },
                  cracaId := '616263'O,
                  crlSeries := 70,
                  validityPeriod := {
                    start_ := 81828384,
                    duration := { hours := 169 }
                  },
                  region := {
                    identifiedRegion := {
                      { countryOnly := 124 },
                      { countryOnly := 484 },
                      { countryOnly := 840 }
                    }
                  },
                  assuranceLevel := omit,
                  appPermissions := {
                    { psid := 32, ssp := omit },
                    { psid := 38, ssp := omit }
                  },
                  certIssuePermissions := omit,
                  certRequestPermissions := omit,
                  canRequestRollover := omit,
                  encryptionKey := omit,
                  verifyKeyIndicator := {
                    reconstructionValue := { compressed_y_0 := '9192939495969798919293949596979891929394959697989192939495969798'O }
                  }
                },
                signature_ := omit
              }
            }
          },
          signature_ := {
            ecdsaNistP256Signature := {
              rSig := { compressed_y_0 := '3132333435363738313233343536373831323334353637383132333435363738'O},
              sSig := '4142434445464748414243444546474841424344454647484142434445464748'O
            }
          }
        }
      }
    };

  if (enc_Ieee1609Dot2Data(data) == encoded) {setverdict(pass);} else {setverdict(fail);}
  if (dec_Ieee1609Dot2Data(encoded) == decoded) {setverdict(pass);} else {setverdict(fail);}
}
//*********************************************
// CONTROL PART
//*********************************************

control {
  execute(tc_Ieee1609Dot2Data_SignedWithDigest());
  execute(tc_Ieee1609Dot2Data_SignedWithCertificate());
}

}

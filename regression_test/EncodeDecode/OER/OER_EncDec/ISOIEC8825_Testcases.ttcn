/******************************************************************************
* Copyright (c) 2000-2021 Ericsson Telecom AB
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v2.0
* which accompanies this distribution, and is available at
* https://www.eclipse.org/org/documents/epl-2.0/EPL-2.0.html
*
* Contributors:
*   Balasko, Jeno
*   Beres, Szabolcs
*   Delic, Adam
*   Kovacs, Ferenc
*   Szabados, Kristof
*   Tarasov, Victor
*
******************************************************************************/
//This file replaces ISOIEC-8825-7-2015-AnnexA-PersonnelRecord.script

//This file contains unified test case related to TTCN3 Executor's OER coder function.
//Test case implement the OER codings example from specification ISO/IEC 8825-7:2015 
//(https://www.itu.int/rec/T-REC-X.696-201508-I)

//---------------------------------------------------------------------
//Testing OER encodings
//---------------------------------------------------------------------
//ISOIEC_8825_7_2015_AnnexA_PersonnelRecord
module ISOIEC8825_Testcases {

import from ISOIEC8825 all;
type component Test_CT {}
//import from TempA all;

external function enc_OER_Date(in Date pdu) return octetstring with { extension "prototype(convert) encode(OER)" }
external function dec_OER_Date(in octetstring stream) return Date with { extension "prototype(convert) decode(OER)" }

external function enc_OER_EmployeeNumber(in EmployeeNumber pdu) return octetstring with { extension "prototype(convert) encode(OER)" }
external function dec_OER_EmployeeNumber(in octetstring stream) return EmployeeNumber with { extension "prototype(convert) decode(OER)" }

external function enc_OER_Name(in Name pdu) return octetstring with { extension "prototype(convert) encode(OER)" }
external function dec_OER_Name(in octetstring stream) return Name with { extension "prototype(convert) decode(OER)" }

external function enc_OER_ChildInformation(in ChildInformation pdu) return octetstring with { extension "prototype(convert) encode(OER)" }
external function dec_OER_ChildInformation(in octetstring stream) return ChildInformation with { extension "prototype(convert) decode(OER)" }

external function enc_OER_Record(in Record pdu) return octetstring with { extension "prototype(convert) encode(OER)" }
external function dec_OER_Record(in octetstring stream) return Record with { extension "prototype(convert) decode(OER)" }

//*********************************************
// TESTCASES
//*********************************************

testcase tc_OER_encoding_of_Date() runs on Test_CT {
  const Date date :=  "19710917"
  const octetstring raw_encoded := '083139373130393137'O; 

  if (enc_OER_Date(date) == raw_encoded) {setverdict(pass);} else {setverdict(fail);}
  if (dec_OER_Date(raw_encoded) == date) {setverdict(pass);} else {setverdict(fail);}
}

testcase tc_OER_encoding_of_EmployeeNumber() runs on Test_CT {
  const EmployeeNumber empl_num :=  51
  if (enc_OER_EmployeeNumber(empl_num) == '0133'O) {setverdict(pass);} else {setverdict(fail);}
}

testcase tc_OER_encoding_of_Name() runs on Test_CT {
  const Name name :=  {
	givenName := "John",
	initial := "P",
	familyName := "Smith"
  }
  const octetstring raw_encoded := '044A6F686E015005536D697468'O; 

  if (enc_OER_Name(name) == raw_encoded) {setverdict(pass);} else {setverdict(fail);}
  if (dec_OER_Name(raw_encoded) == name) {setverdict(pass);} else {setverdict(fail);}
}

testcase tc_OER_ChildInformation() runs on Test_CT {
  const ChildInformation child := {
	name := {
		givenName := "Ralph",
		initial := "T",
		familyName := "Smith"
	},
	dateOfBirth := "19571111"
  }
  const octetstring raw_encoded := '0552616C7068015405536D697468083139353731313131'O;

  if (enc_OER_ChildInformation(child) == raw_encoded) {setverdict(pass);} else {setverdict(fail);}
  if (dec_OER_ChildInformation(raw_encoded) == child) {setverdict(pass);} else {setverdict(fail);}
}

testcase tc_OER_Record() runs on Test_CT {
  const octetstring raw_encoded := 
	'80044A6F686E015005536D6974680133084469726563746F72083139373130393137044D617279015405536D69746801020552616C7068015405536D69746808313935373131313105537573616E0142054A6F6E6573083139353930373137'O;
  const Record rec := {
	name := {
		givenName := "John",
		initial := "P",
		familyName := "Smith"},
	title := "Director",
	number := 51,
	dateOfHire := "19710917",
	nameOfSpouse := {
		givenName := "Mary",
		initial := "T",
		familyName := "Smith"},
	children := {
		{ name := {
			givenName := "Ralph",
			initial := "T",
			familyName := "Smith"},
		dateOfBirth := "19571111" },
		{ name := {
			givenName := "Susan",
			initial := "B",
			familyName := "Jones"},
		dateOfBirth := "19590717"}
	}
  }

  if (enc_OER_Record(rec) == raw_encoded) {setverdict(pass);} else {setverdict(fail);}
  if (dec_OER_Record(raw_encoded) == rec) {setverdict(pass);} else {setverdict(fail);}
}

//*********************************************
// CONTROL PART
//*********************************************

control {
  execute(tc_OER_encoding_of_Date());
  execute(tc_OER_encoding_of_EmployeeNumber());
  execute(tc_OER_encoding_of_Name());
  execute(tc_OER_ChildInformation());
  execute(tc_OER_Record());
}


}

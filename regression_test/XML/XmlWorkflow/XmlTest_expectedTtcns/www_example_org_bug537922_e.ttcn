/*******************************************************************************
* Copyright (c) 2000-2021 Ericsson Telecom AB
*
* XSD to TTCN-3 Translator version: 7/CAX 105 7730 R2A                       
*
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v2.0
* which accompanies this distribution, and is available at
* https://www.eclipse.org/org/documents/epl-2.0/EPL-2.0.html
*******************************************************************************/
//
//  File:          www_example_org_bug537922.ttcn
//  Description:
//  References:
//  Rev:
//  Prodnr:
//  Updated:       Tue Feb 12 13:25:48 2019
//  Contact:       http://ttcn.ericsson.se
//
////////////////////////////////////////////////////////////////////////////////
//	Generated from file(s):
//	- Bug537922.xsd
//			/* xml version = "1.0" encoding = "UTF-8" */
//			/* targetnamespace = "www.example.org/bug537922" */
////////////////////////////////////////////////////////////////////////////////
//     Modification header(s):
//-----------------------------------------------------------------------------
//  Modified by:
//  Modification date:
//  Description:
//  Modification contact:
//------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////


module www_example_org_bug537922 {


import from XSD all;


type record Mapping
{
	XSD.AnySimpleType expires,
	XSD.Integer xsinteger optional,
	XSD.DateTime lastUpdated,
	XSD.Token message_ optional,
	AppUniqueString source,
	XSD.Token sourceId,
	record of DisplayName displayName_list,
	Service service optional,
	union {
		ServiceBoundary_1 serviceBoundary,
		ServiceBoundaryReference serviceBoundaryReference
	} choice optional,
	record of Uri uri_list,
	ServiceNumber serviceNumber optional,
	record of NotLost notLost_list
}
with {
  variant "name as uncapitalized";
  variant "element";
  variant (expires) "attribute";
  variant (xsinteger) "name as 'xs:integer'";
  variant (xsinteger) "attribute";
  variant (lastUpdated) "attribute";
  variant (message_) "name as 'message'";
  variant (message_) "attribute";
  variant (source) "attribute";
  variant (sourceId) "attribute";
  variant (displayName_list) "untagged";
  variant (displayName_list[-]) "name as 'displayName'";
  variant (choice) "untagged";
  variant (uri_list) "untagged";
  variant (uri_list[-]) "name as 'uri'";
  variant (notLost_list) "untagged";
};


type record DisplayName
{
	XSD.Integer xsinteger,
	XSD.String base
}
with {
  variant "name as uncapitalized";
  variant "element";
  variant (xsinteger) "name as 'xs:integer'";
  variant (xsinteger) "attribute";
  variant (base) "untagged";
};


type record ServiceGroup
{
	Service service optional
}
with {
  variant "untagged";
};


type XSD.AnyURI Service
with {
  variant "name as uncapitalized";
  variant "element";
};


type record ServiceBoundary_1
{
	record length(1 .. infinity) of ServiceBoundary serviceBoundary_list
}
with {
  variant "untagged";
  variant (serviceBoundary_list) "untagged";
  variant (serviceBoundary_list[-]) "name as 'serviceBoundary'";
};


type LocationInformation ServiceBoundary
with {
  variant "name as uncapitalized";
  variant "element";
};


type record LocationInformation
{
	XSD.NMTOKEN profile optional,
	record length(1 .. infinity) of ExtensionPoint extensionPoint_list
}
with {
  variant "name as uncapitalized";
  variant (profile) "attribute";
  variant (extensionPoint_list) "untagged";
};


/* A point where future extensions
  (elements from other namespaces)
  can be added. */
type record ExtensionPoint
{
	record of NotLost notLost_list
}
with {
  variant "untagged";
  variant (notLost_list) "untagged";
};


/* Any element not in the LoST namespace. */
type union NotLost
{
	XSD.String elem
}
with {
  variant "untagged";
  variant (elem) "anyElement from unqualified";
};


type record ServiceBoundaryReference
{
	XSD.Token key,
	AppUniqueString source,
	record of NotLost notLost_list
}
with {
  variant "name as uncapitalized";
  variant "element";
  variant (key) "attribute";
  variant (source) "attribute";
  variant (notLost_list) "untagged";
};


type XSD.Token AppUniqueString (pattern "([a-zA-Z0-9\-]+.)+[a-zA-Z0-9]+")
with {
  variant "name as uncapitalized";
};


type XSD.AnyURI Uri
with {
  variant "name as uncapitalized";
  variant "element";
};


type XSD.Token ServiceNumber (pattern "[0-9*#]+")
with {
  variant "name as uncapitalized";
  variant "element";
};


}
with {
  encode "XML";
  variant "namespace as 'www.example.org/bug537922' prefix 'ns1'";
  variant "controlNamespace 'http://www.w3.org/2001/XMLSchema-instance' prefix 'xsi'";
  variant "elementFormQualified";
}

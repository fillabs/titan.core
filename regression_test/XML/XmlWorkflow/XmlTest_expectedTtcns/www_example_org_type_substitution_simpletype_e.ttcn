/*******************************************************************************
* Copyright (c) 2000-2021 Ericsson Telecom AB
*
* XSD to TTCN-3 Translator         
*
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v2.0
* which accompanies this distribution, and is available at
* https://www.eclipse.org/org/documents/epl-2.0/EPL-2.0.html
*
* Contributors:
*   Balasko, Jeno
*   Szabo, Bence Janos
*   Botond, Baranyi
*
*******************************************************************************/
//
//  File:          www_example_org_type_substitution_simpletype.ttcn
//  Description:
//  References:
//  Rev:
//  Prodnr:
//  Updated:       Mon Jan 18 18:05:14 2021
//  Contact:       http://ttcn.ericsson.se
//
////////////////////////////////////////////////////////////////////////////////
//	Generated from file(s):
//	- type_substitution_simpletype.xsd
//			/* xml version = "1.0" encoding = "UTF-8" */
//			/* targetnamespace = "www.example.org/type/substitution/simpletype" */
////////////////////////////////////////////////////////////////////////////////
//     Modification header(s):
//-----------------------------------------------------------------------------
//  Modified by:
//  Modification date:
//  Description:
//  Modification contact:
//------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////


module www_example_org_type_substitution_simpletype {


import from XSD all;


type String_derivations Head
with {
  variant "name as uncapitalized";
  variant "element";
};


type String_derivations Head_1
with {
  variant "name as 'head_'";
  variant "element";
};


type Stringtype_derivations Head2
with {
  variant "name as uncapitalized";
  variant "element";
};


type XSD.String Stringtype
with {
  variant "name as uncapitalized";
};


type XSD.String Stringtype2 length(5)
with {
  variant "name as uncapitalized";
};


type Integer_derivations Int
with {
  variant "name as uncapitalized";
  variant "element";
};


type XSD.Integer ExtInt
with {
  variant "name as uncapitalized";
};


/* Test if the elements are changed in a complextype */


type Base64Binary_derivations Elem
with {
  variant "name as uncapitalized";
  variant "element";
};


type XSD.Base64Binary CrypBinary;


type Signature SignatureValue
with {
  variant "element";
};


type record Signature
{
	XSD.ID id optional,
	XSD.Base64Binary base
}
with {
  variant (id) "name as capitalized";
  variant (id) "attribute";
  variant (base) "untagged";
};


type DataType Data
with {
  variant "element";
};


type record DataType
{
	union {
		Base64Binary_derivations sKI,
		Base64Binary_derivations cert
	} choice
}
with {
  variant (choice) "untagged";
  variant (choice.sKI) "name as capitalized";
  variant (choice.cert) "name as capitalized";
};


/* Bug 569238 - xsd2ttcn creates cyclical definitions */


type XSD.Token Head569238 (pattern "[0-9]#(6,15)");


type Head569238 Type569238;


type record Complex569238
{
	union {
		Head569238_derivations head,
		Type569238 type_
	} choice
}
with {
  variant (choice) "untagged";
  variant (choice.type_) "name as 'type'";
};


type union String_derivations
{
	@default XSD.String string,
	Stringtype stringtype,
	Stringtype2 stringtype2
}
with {
  variant "useType";
};


type union Stringtype_derivations
{
	@default Stringtype stringtype,
	Stringtype2 stringtype2
}
with {
  variant "useType";
};


type union Integer_derivations
{
	@default XSD.Integer integer_,
	ExtInt extInt
}
with {
  variant "useType";
  variant (integer_) "name as 'integer'";
};


type union Base64Binary_derivations
{
	@default XSD.Base64Binary base64Binary,
	CrypBinary crypBinary
}
with {
  variant "useType";
  variant (crypBinary) "name as capitalized";
};


type union Head569238_derivations
{
	@default Head569238 head569238,
	Type569238 type569238
}
with {
  variant "useType";
  variant (head569238) "name as capitalized";
  variant (type569238) "name as capitalized";
};


}
with {
  encode "XML";
  variant "namespace as 'www.example.org/type/substitution/simpletype' prefix 'this'";
  variant "controlNamespace 'http://www.w3.org/2001/XMLSchema-instance' prefix 'xsi'";
}
